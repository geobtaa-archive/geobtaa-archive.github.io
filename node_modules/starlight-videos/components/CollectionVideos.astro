---
import { Icon } from '@astrojs/starlight/components'
import type { HTMLAttributes } from 'astro/types'

import { getEntryPath, stripTrailingSlash } from '../libs/path'
import type { CollectionVideoEntry } from '../libs/video'

import Duration from './Duration.astro'

interface Props {
  collectionVideos: CollectionVideoEntry[]
  variant?: 'playlist' | undefined
}

const { locale } = Astro.locals.starlightRoute
const { collectionVideos, variant } = Astro.props

type LinkAttributes = HTMLAttributes<'a'>
---

<sl-videos-collection-videos>
  <button>
    <span class="sr-only">{Astro.locals.t('starlightVideos.collection.playlist.toggle')}</span>
    <Icon name="right-caret" size="1.3rem" />
  </button>
  <ul class:list={[{ 'sl-videos-collection-videos-playlist': variant === 'playlist' }]}>
    {
      collectionVideos.map(({ data, data: { video }, id }) => {
        const href = getEntryPath(id, locale)

        const attributes: LinkAttributes = { href }
        if (href === stripTrailingSlash(Astro.url.pathname)) attributes['aria-current'] = 'page'

        return (
          <li>
            <a {...attributes}>{data.title}</a>
            <Duration value={video.duration} withIcon={false} />
          </li>
        )
      })
    }
  </ul>
</sl-videos-collection-videos>

<style is:global>
  :root {
    --sl-videos-playlist-width: 22rem;
  }
</style>

<style>
  ul {
    background-color: var(--sl-color-gray-6);
    max-height: 14rem;
    overflow-y: auto;
    padding: 0;
  }

  ul.sl-videos-collection-videos-playlist {
    border-top: 1px solid var(--sl-color-hairline-shade);
  }

  @media (min-width: 50rem) {
    ul {
      max-height: unset;
    }

    ul.sl-videos-collection-videos-playlist-folded {
      display: none;
    }

    ul.sl-videos-collection-videos-playlist {
      border-left: 1px solid var(--sl-color-hairline-shade);
      border-top: none;
      bottom: 0;
      left: 100%;
      position: absolute;
      right: calc(-1 * var(--sl-videos-playlist-width));
      top: 0;
    }
  }

  li {
    align-items: center;
    color: var(--sl-color-gray-2);
    display: flex;
    font-size: var(--sl-text-sm);
    gap: 1rem;
    padding: 0.625rem 1rem;
    position: relative;
  }

  li:hover,
  li:has(:is(:focus-within, a[aria-current='page'])) {
    background-color: var(--sl-color-gray-5);
    color: var(--sl-color-white);
  }

  a {
    color: inherit;
    display: -webkit-box;
    font-size: var(--sl-text-base);
    line-height: 1.3;
    overflow: hidden;
    text-decoration: none;
    text-overflow: ellipsis;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
  }

  a::before {
    content: '';
    inset: 0;
    position: absolute;
  }

  span {
    font-size: 14px;
  }

  button {
    --sl-videos-collection-videos-toggle-width: 1.2rem;
    --sl-videos-collection-videos-toggle-height: 3rem;

    background-color: var(--sl-color-gray-6);
    border: none;
    border-radius: 0;
    cursor: pointer;
    display: none;
    height: 3rem;
    left: calc(100% - var(--sl-videos-collection-videos-toggle-width) + 1px);
    position: absolute;
    top: calc(50% - var(--sl-videos-collection-videos-toggle-height) / 2);
    width: var(--sl-videos-collection-videos-toggle-width);
    z-index: 1;
  }

  button:is(:hover, :focus-visible) {
    background-color: var(--sl-color-black);
  }

  @media (min-width: 50rem) {
    button:has(+ ul.sl-videos-collection-videos-playlist) {
      display: block;
    }

    button:has(+ ul.sl-videos-collection-videos-playlist-folded) {
      background-color: var(--sl-color-black);
      left: calc(100% - var(--sl-videos-collection-videos-toggle-width));
      transform: matrix(-1, 0, 0, 1, 0, 0);
    }

    button:has(+ ul.sl-videos-collection-videos-playlist-folded):is(:hover, :focus-visible) {
      background-color: var(--sl-color-gray-6);
    }
  }

  button svg {
    position: absolute;
    left: 0;
    top: calc(50% - 1.3rem / 2);
  }
</style>

<script>
  customElements.define(
    'sl-videos-collection-videos',
    class StarlightVideosCollectionVideosToggle extends HTMLElement {
      constructor() {
        super()

        const list = this.querySelector('ul')
        const toggle = this.querySelector('button')

        if (!toggle || !list) return

        toggle.addEventListener('click', () => list.classList.toggle('sl-videos-collection-videos-playlist-folded'))
      }
    },
  )
</script>
