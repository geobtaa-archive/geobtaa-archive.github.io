---
import fs from "fs";
import { csvParse } from "d3-dsv";

export interface Props {
  /** Path to the CSV, relative to THIS file (or give an absolute file URL) */
  src?: string;
  /** 'first_name' | 'last_name' | 'institution' | 'job_title' */
  sortBy?: 'first_name' | 'last_name' | 'institution' | 'job_title';
  /** 'asc' | 'desc' */
  direction?: 'asc' | 'desc';
}

const {
  src = "../tables/teamMembers-2025.csv",
  sortBy = "last_name",
  direction = "asc",
} = Astro.props;

/** Resolve and read the CSV text */
const fileUrl = new URL(src, import.meta.url);
const csvText = fs.readFileSync(fileUrl, "utf8");

/** Parse CSV (works with quoted commas, etc.) */
const rows = csvParse(csvText);

/** Helper: normalize a header to snake_case */
const normKey = (k: string) =>
  k.trim().toLowerCase().replace(/\s+/g, "_").replace(/[^\w]/g, "_");

/** Build a clean, predictable shape no matter the original headers */
const team = rows.map((r) => {
  // map all keys â†’ snake_case
  const m: Record<string, string> = {};
  for (const [k, v] of Object.entries(r)) {
    m[normKey(k)] = (v ?? "").trim();
  }
  return {
    first_name: m.first_name ?? m.firstname ?? "",
    last_name: m.last_name ?? m.lastname ?? "",
    job_title: m.job_title ?? m.title ?? "",
    institution: m.institution ?? "",
  };
});

/** Smart sort with stable tie-breakers */
const coll = new Intl.Collator("en", { sensitivity: "base", numeric: true });
const dir = direction === "desc" ? -1 : 1;

const sorted = [...team].sort((a, b) => {
  const byPrimary = coll.compare(a[sortBy], b[sortBy]) * dir;
  if (byPrimary) return byPrimary;
  const byLast = coll.compare(a.last_name, b.last_name) * dir;
  if (byLast) return byLast;
  const byFirst = coll.compare(a.first_name, b.first_name) * dir;
  if (byFirst) return byFirst;
  return coll.compare(a.institution, b.institution) * dir;
});
---

<section class="people-grid not-content" aria-label="Team Members">
  {sorted.map((p) => (
    <article class="person-card">
      <h3 class="name">{p.first_name} {p.last_name}</h3>
      {p.job_title && <p class="title" title={p.job_title}>{p.job_title}</p>}
      {p.institution && <p class="institution">{p.institution}</p>}
    </article>
  ))}
</section>

<style>
.people-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
  gap: 0.85rem;
  margin-block: 1rem 1.5rem;
}
.person-card {
  background: var(--sl-color-bg-alt);
  border-radius: 0.75rem;
  padding: 0.75rem 0.9rem;
  box-shadow: 0 0 0 1px var(--sl-color-hairline);
  line-height: 1.3;
}
.name {
  font-size: 1rem;
  margin: 0 0 0.2rem 0;
}
.title {
  font-size: 0.875rem;
  margin: 0;
  color: var(--sl-color-text-secondary);
  /* keep long titles from pushing the layout */
  display: -webkit-box;
  -webkit-line-clamp: 2;           /* show up to 2 lines, then ellipsis */
  -webkit-box-orient: vertical;
  overflow: hidden;
}
.institution {
  font-size: 0.875rem;
  margin-top: 0.25rem;
  font-style: italic;
  color: var(--sl-color-text);
  word-break: break-word;
}
</style>
