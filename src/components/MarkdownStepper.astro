---
import { Markdown } from 'astro/components';

/** Props:
 *  - source  : string (the full markdown with `---` separators)
 *  - title   : string (shown in step headers) [optional]
 *  - startAt : number (1-based initial step to scroll to) [optional]
 */
const { source, title = 'Tutorial', startAt = 1 } = Astro.props;

// Split on a line that contains only --- (with optional surrounding whitespace and CRLF/LF)
const raw = (source ?? '');
const steps = raw.split(/\r?\n\s*---\s*\r?\n/);

// If the file led or trailed with separators, filter out emptiesâ€”but preserve intentional blank slides
const cleanSteps = steps.filter((s, i, arr) => !(s.trim() === '' && (i === 0 || i === arr.length - 1)));
const total = cleanSteps.length;
---

{total === 0 ? (
  <div class="md-stepper md-stepper--empty">
    <p><em>No steps found. Ensure your tutorial file uses lines with only <code>---</code> to separate steps and that you import it with <code>?raw</code>.</em></p>
  </div>
) : (
  <div class="md-stepper" data-total={total}>
    <nav class="md-stepper__progress" aria-label="Progress">
      <ol>
        {cleanSteps.map((_, i) => (
          <li><a href={`#step-${i + 1}`} aria-label={`Go to step ${i + 1}`}>{i + 1}</a></li>
        ))}
      </ol>
    </nav>

    {cleanSteps.map((chunk, i) => {
      const n = i + 1;
      return (
        <section id={`step-${n}`} class="md-stepper__step" aria-labelledby={`h-step-${n}`}>
          <header>
            <h2 id={`h-step-${n}`}>{title}: Step {n} of {total}</h2>
          </header>

          <div class="md-stepper__body">
            <Markdown content={chunk} />
          </div>

          <footer class="md-stepper__nav">
            {n > 1 && <a class="btn" href={`#step-${n - 1}`} data-step={n - 1}>&larr; Prev</a>}
            {n < total
              ? <a class="btn btn--primary" href={`#step-${n + 1}`} data-step={n + 1}>Next &rarr;</a>
              : <a class="btn btn--done" href="#step-1" data-step="1">Back to start</a>}
          </footer>
        </section>
      );
    })}
  </div>
)}

<script is:inline>
  // Jump to ?step= or #step-X on load
  const params = new URLSearchParams(location.search);
  const qStep = parseInt(params.get('step') || '', 10);
  const hashMatch = location.hash.match(/#step-(\d+)/);
  const initial = qStep || (hashMatch ? parseInt(hashMatch[1], 10) : Number({startAt}));

  if (initial && !Number.isNaN(initial)) {
    const el = document.getElementById(`step-${initial}`);
    if (el) el.scrollIntoView();
  }

  // As you scroll, highlight the current step number in the progress bar
  const steps = Array.from(document.querySelectorAll('.md-stepper__step'));
  const links = Array.from(document.querySelectorAll('.md-stepper__progress a'));
  const io = new IntersectionObserver((entries) => {
    // Find the top-most visible step
    const visible = entries
      .filter(e => e.isIntersecting)
      .sort((a, b) => a.target.getBoundingClientRect().top - b.target.getBoundingClientRect().top)[0];
    if (!visible) return;
    const id = visible.target.id;
    links.forEach(a => a.classList.toggle('is-active', a.getAttribute('href') === '#' + id));
  }, { rootMargin: '-30% 0px -60% 0px', threshold: 0.01 });
  steps.forEach(el => io.observe(el));

  // Optional: smooth-scroll for Prev/Next buttons and progress links
  document.addEventListener('click', (e) => {
    const a = e.target.closest('a[href^="#step-"]');
    if (!a) return;
    const id = a.getAttribute('href').slice(1);
    const el = document.getElementById(id);
    if (!el) return;
    e.preventDefault();
    el.scrollIntoView({ behavior: 'smooth', block: 'start' });
    history.replaceState(null, '', `#${id}`); // keep the hash in sync
  });
</script>

<style>
  /* Container & Progress */
  .md-stepper { margin-block: 0.5rem 2rem; }
  .md-stepper__progress { margin: 1rem 0 1.25rem; }
  .md-stepper__progress ol {
    display: flex; gap: .5rem; list-style: none; padding: 0; margin: 0; flex-wrap: wrap;
  }
  .md-stepper__progress a {
    display: inline-block;
    padding: .25rem .6rem;
    border: 1px solid var(--sl-color-hairline);
    border-radius: .5rem;
    text-decoration: none;
    color: var(--sl-color-text);
    background: var(--sl-color-bg);
  }
  .md-stepper__progress a.is-active {
    outline: 2px solid var(--sl-color-primary);
    outline-offset: 2px;
  }

  /* Step Card */
  .md-stepper__step {
    margin-block: 1.25rem 2rem;
    padding: 1rem;
    border: 1px solid var(--sl-color-hairline);
    border-radius: .75rem;
    background: var(--sl-color-bg);
  }
  .md-stepper__step header h2 {
    margin: 0 0 .75rem;
    font-size: 1.1rem;
  }
  .md-stepper__body :where(h1,h2,h3) { margin-top: .4rem; }

  /* Nav buttons */
  .md-stepper__nav {
    display: flex; justify-content: space-between; gap: .5rem; margin-top: 1rem;
  }
  .btn {
    padding: .5rem .9rem;
    border: 1px solid var(--sl-color-hairline);
    border-radius: .5rem;
    text-decoration: none;
  }
  .btn--primary {
    background: var(--sl-color-primary);
    color: #fff;
    border-color: var(--sl-color-primary);
  }
  .btn--done {
    background: var(--sl-color-accent);
    color: #fff;
    border-color: var(--sl-color-accent);
  }

  /* Small screens */
  @media (max-width: 720px) {
    .md-stepper__progress ol { gap: .4rem; }
    .md-stepper__step { padding: .85rem; }
  }
</style>
