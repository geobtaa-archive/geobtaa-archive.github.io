---
import SidebarComponent from "@astrojs/starlight/components/Sidebar.astro";
import mdiIcons from "@iconify-json/mdi/icons.json";
import { parseSvgPath } from "../utils/common-utils";
const chevronLeft = parseSvgPath(mdiIcons.icons["chevron-left"].body);
---

<script>
  import { documentQuerySelector } from "../utils/common-utils";
  import config from "virtual:starlight-fullview-mode-config";

  let toggleSideBarBtn = documentQuerySelector(".toggle-left-side-bar-btn");

  function configureSideBar() {
    let mainSidebarContainer = documentQuerySelector(".sidebar-pane");
    let navBar = mainSidebarContainer.querySelector(
      "ul.top-level"
    ) as HTMLElement;
    let mainFrame = documentQuerySelector(".main-frame");
    let body = documentQuerySelector("body");

    // Store the original state before any media query changes
    let originalState = sessionStorage.getItem("mainSideBarCollapsed") === "true";
    let stateModifiedByMediaQuery = false;

    const toggleLeftSideBar = (isMainSideBarCollapsed?: boolean) => {
      // @ts-ignore
      if (isMainSideBarCollapsed instanceof Event) {
        isMainSideBarCollapsed =
          sessionStorage.getItem("mainSideBarCollapsed") === "true";
      }
      if (!isMainSideBarCollapsed) {
        mainSidebarContainer.classList.add("sidebar-pane-collapsed");
        mainSidebarContainer.style.width = config.leftSidebarCollapsedWidth;
        document.documentElement.style.setProperty(
          "--tablet-navbar-inset-inline-start",
          config.leftSidebarCollapsedWidth
        );
        document.documentElement.style.setProperty(
          "--sl-content-inline-start",
          config.leftSidebarCollapsedWidth ?? "var(--sl-sidebar-width)"
        );
        mainSidebarContainer.style.overflow = "hidden";
        navBar.style.opacity = "0";
        mainFrame.style.paddingInlineStart = mainSidebarContainer.style.width;
        body.classList.add("main-side-bar-collapsed");
      } else {
        mainSidebarContainer.classList.remove("sidebar-pane-collapsed");
        mainSidebarContainer.style.width =  config.leftSidebarExpandedWidth ?? "";
        const mediaQuery = window.matchMedia('only screen and (max-width: 800px)');
        document.documentElement.style.setProperty(
          "--tablet-navbar-inset-inline-start",
          mediaQuery.matches ? "var(--sl-sidebar-width)" : getComputedStyle(mainSidebarContainer).getPropertyValue("width") ??"var(--sl-sidebar-width)"
        );

        document.documentElement.style.setProperty(
          "--sl-content-inline-start",
          mediaQuery.matches ? "0px" : config.leftSidebarExpandedWidth ??"var(--sl-sidebar-width)"
        );
        mainSidebarContainer.style.overflow = "";
        navBar.style.opacity = "";
        mainFrame.style.paddingInlineStart = config.leftSidebarExpandedWidth ??"";
        body.classList.remove("main-side-bar-collapsed");
      }

      if (!stateModifiedByMediaQuery) {
        sessionStorage.setItem(
          "mainSideBarCollapsed",
          isMainSideBarCollapsed ? "false" : "true"
        );
      }
    };

    // @ts-ignore
    toggleSideBarBtn.addEventListener("click", toggleLeftSideBar);
    if (config.rotateSidebarToggleWhenClosed) {
      toggleSideBarBtn.classList.add("rotates");
    }
    
    const handleResize = () => {
      const mediaQuery = window.matchMedia('only screen and (max-width: 800px)');
      if (mediaQuery.matches) {
        // Save current state before collapsing for mobile
        originalState = sessionStorage.getItem("mainSideBarCollapsed") === "true";
        stateModifiedByMediaQuery = true;
        toggleLeftSideBar(true);
      } else {
        // Restore original state when back to desktop
        stateModifiedByMediaQuery = false;
        toggleLeftSideBar(!originalState);
      }
    };

    // Initialize with current state
    let isMainSideBarCollapsed =
      sessionStorage.getItem("mainSideBarCollapsed") === "true";
    toggleLeftSideBar(!isMainSideBarCollapsed);

    // Set up resize listener
    window.addEventListener("resize", handleResize);

    // Check on initial load in case we're already in mobile view
    handleResize();
  }

  document.addEventListener("DOMContentLoaded", () => {
    if (config.leftSidebarEnabled) configureSideBar();
  });
</script>

<div class="toggle-left-side-bar-btn max-md:hidden">
  <svg
    xmlns="http://www.w3.org/2000/svg"
    width="18"
    height="18"
    viewBox="0 0 24 24"
  >
    <path fill="grey" d={chevronLeft}></path>
  </svg>
</div>
<SidebarComponent />
