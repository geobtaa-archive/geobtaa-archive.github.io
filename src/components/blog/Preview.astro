---
import type { CollectionEntry } from 'astro:content'
import blogContext from 'virtual:starlight-blog-context'
import starlightConfig from 'virtual:starlight/user-config'

import Cover from '../../../node_modules/starlight-blog/components/Cover.astro'
import Excerpt from '../../../node_modules/starlight-blog/components/Excerpt.astro'
import Metadata from '../../../node_modules/starlight-blog/components/Metadata.astro'
import PostTags from '../../../node_modules/starlight-blog/components/PostTags.astro'

type BlogEntry = CollectionEntry<'docs'>
type Locale = string | undefined

interface Props {
  entry: BlogEntry
  locale: Locale
}

const { entry, locale } = Astro.props

const stripLeadingSlash = (path: string) => (path.startsWith('/') ? path.slice(1) : path)
const stripTrailingSlash = (path: string) => (path.endsWith('/') ? path.slice(0, -1) : path)
const ensureTrailingSlash = (path: string) => (path.endsWith('/') ? path : `${path}/`)

const trailingSlashTransformers = {
  always: ensureTrailingSlash,
  ignore: ensureTrailingSlash,
  never: stripTrailingSlash,
} as const

const base = stripTrailingSlash(import.meta.env.BASE_URL)

const getLocaleFromPath = (path: string) => {
  const baseSegment = path.split('/')[0]
  return starlightConfig.locales && baseSegment && baseSegment in starlightConfig.locales ? baseSegment : undefined
}

const getPathWithLocale = (path: string, targetLocale: Locale) => {
  const pathLocale = getLocaleFromPath(path)
  if (pathLocale === targetLocale) return path
  const normalizedLocale = targetLocale ?? ''
  if (pathLocale === path) return normalizedLocale
  if (pathLocale) {
    return stripTrailingSlash(
      path.replace(`${pathLocale}/`, normalizedLocale ? `${normalizedLocale}/` : ''),
    )
  }
  return path ? `${stripTrailingSlash(normalizedLocale)}/${stripLeadingSlash(path)}` : normalizedLocale
}

const getRelativeUrl = (path: string, ignoreTrailingSlash = false) => {
  path = stripLeadingSlash(path)
  path = path ? `${base}/${path}` : `${base}/`

  if (ignoreTrailingSlash) {
    return path
  }

  const trailingSlashTransformer = trailingSlashTransformers[blogContext.trailingSlash]
  return trailingSlashTransformer(path)
}

const href = getRelativeUrl(`/${getPathWithLocale(entry.id, locale)}`)
const hasCover = Boolean(entry.data.cover)
---

<article class="preview-card">
  <div class="preview-card__layout">
    {hasCover && (
      <div class="preview-card__thumbnail">
        <Cover cover={entry.data.cover} />
      </div>
    )}
    <div class="preview-card__body">
      <header class="preview-card__header">
        <h2>
          <a href={href}>{entry.data.title}</a>
        </h2>
        <Metadata entry={entry} locale={locale} />
      </header>
      <div class="sl-markdown-content preview-card__excerpt">
        <Excerpt entry={entry} />
      </div>
      <footer class="preview-card__footer">
        <PostTags entry={entry} locale={locale} />
      </footer>
    </div>
  </div>
  <a class="preview-card__overlay" href={href} aria-hidden="true" tabindex="-1" />
</article>

<style>
  .preview-card {
    position: relative;
    border: 1px solid var(--sl-color-gray-5);
    border-radius: 0.85rem;
    padding: clamp(1.25rem, 2vw, 1.75rem);
    background: var(--sl-color-bg);
    transition: border-color 0.15s ease, box-shadow 0.15s ease, transform 0.15s ease;
  }

  .preview-card:focus-within,
  .preview-card:hover {
    border-color: color-mix(in srgb, var(--sl-color-accent) 40%, transparent);
    box-shadow: 0 0.5rem 1.5rem -1rem rgb(15 23 42 / 25%);
    transform: translateY(-2px);
  }

  .preview-card__layout {
    display: flex;
    gap: clamp(1rem, 3vw, 2rem);
    align-items: stretch;
    position: relative;
    z-index: 1;
  }

  .preview-card__thumbnail {
    flex: 0 0 clamp(8rem, 18vw, 12rem);
    position: relative;
    z-index: 1;
  }

  .preview-card__thumbnail :global(figure) {
    height: 100%;
    margin: 0;
  }

  .preview-card__thumbnail :global(img) {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border-radius: 0.75rem;
  }

  .preview-card__body {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    position: relative;
    z-index: 1;
  }

  .preview-card__header {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  h2 {
    margin: 0;
    font-size: clamp(1.35rem, 2.2vw, 1.6rem);
  }

  h2 a {
    position: relative;
    z-index: 3;
    color: inherit;
    text-decoration: none;
  }

  h2 a:focus-visible {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 4px;
  }

  .preview-card__excerpt {
    color: var(--sl-color-gray-2);
  }

  .preview-card__footer {
    margin-top: auto;
  }

  .preview-card__footer :global(a) {
    position: relative;
    z-index: 3;
  }

  .preview-card__overlay {
    position: absolute;
    inset: 0;
    border-radius: inherit;
    z-index: 2;
    cursor: pointer;
  }

  .preview-card__overlay:focus-visible {
    outline: 2px solid var(--sl-color-accent);
    outline-offset: 4px;
  }

  @media (max-width: 720px) {
    .preview-card__layout {
      flex-direction: column;
    }

    .preview-card__thumbnail {
      flex-basis: auto;
      max-width: 100%;
      aspect-ratio: 16 / 9;
    }

    .preview-card__thumbnail :global(img) {
      border-radius: 0.65rem;
    }
  }
</style>
