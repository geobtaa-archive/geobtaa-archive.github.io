---
const asideVariants = ['note', 'tip', 'caution', 'danger'] as const
const defaultIconByType = {
  note: 'i-ph:info-bold',
  tip: 'i-ph:rocket-launch-bold',
  caution: 'i-ph:warning-bold',
  danger: 'i-ph:warning-octagon-bold',
} as const

interface Props {
  type?: (typeof asideVariants)[number] | (string & {})
  title?: string
  icon?: string
  class?: string
}

let { type = 'note', title, icon, class: className } = Astro.props

const tOr = (key: string, fallback: string): string => {
  const translated = Astro.locals.t(key)
  return translated === key ? fallback : translated
}

title ??= tOr(`aside.${type}`, 'Note')

const computedIconClass = icon || defaultIconByType[type as keyof typeof defaultIconByType] || 'i-ph:info-bold'
---

<aside aria-label={title} class:list={[`starlight-aside starlight-aside--${type}`, className]}>
  <p class="starlight-aside__title" aria-hidden="true">
    <span class:list={[computedIconClass, 'starlight-aside__icon']}></span>{title}
  </p>
  <div class="starlight-aside__content">
    <slot />
  </div>
</aside>
