---
import CenterLayout from 'src/components/CenterLayout.astro';
export { default as TwoThirdsLayout } from 'src/components/TwoThirdsLayout.astro';
export { default as ChipList } from 'src/components/ChipList.astro';
export { Card, CardGrid } from '@astrojs/starlight/components';

interface ProgramUpdateFrontmatter {
  title: string;
  date?: string | Date;
  excerpt?: string;
  tags?: string[];
  cover?: {
    image: string;
    alt?: string;
    caption?: string;
  };
}

const imageManifest = import.meta.glob<{
  default: string | { src: string };
}>('../assets/images/**/*', { eager: true });

const resolveImagePath = (input?: string) => {
  if (!input) return undefined;

  if (/^https?:\/\//.test(input) || input.startsWith('/')) {
    return input;
  }

  const normalized = input
    .replace(/^@images\//, '')
    .replace(/^(\.\/|\.\.\/)+/, '')
    .replace(/^assets\/images\//, '')
    .replace(/^src\/assets\/images\//, '');

  const manifestKey = `../assets/images/${normalized}`;

  if (manifestKey in imageManifest) {
    const resource = imageManifest[manifestKey];
    if (typeof resource?.default === 'string') {
      return resource.default;
    }
    if (resource?.default && typeof resource.default === 'object' && 'src' in resource.default) {
      return resource.default.src;
    }
    if (typeof resource === 'string') {
      return resource;
    }
    if (resource && typeof resource === 'object' && 'src' in resource) {
      return resource.src as string;
    }
  }

  try {
    return new URL(input, import.meta.url).pathname;
  } catch {
    return input;
  }
};

const { frontmatter } = Astro.props as {
  frontmatter: ProgramUpdateFrontmatter;
};

const coverImageSrc = resolveImagePath(frontmatter?.cover?.image);

const isoDate =
  frontmatter?.date instanceof Date
    ? frontmatter.date.toISOString()
    : frontmatter?.date
    ? new Date(frontmatter.date).toISOString()
    : undefined;

const displayDate =
  frontmatter?.date instanceof Date
    ? frontmatter.date.toLocaleDateString(undefined, { dateStyle: 'long' })
    : frontmatter?.date
    ? new Date(frontmatter.date).toLocaleDateString(undefined, { dateStyle: 'long' })
    : undefined;
---

<article class="program-update">
  {coverImageSrc && (
    <CenterLayout>
      <img
        src={coverImageSrc}
        alt={frontmatter.cover?.alt ?? ''}
        class="program-update__cover-image"
      />
      {(frontmatter.cover?.caption ?? frontmatter.cover?.alt) && (
        <em class="program-update__cover-caption">
          {frontmatter.cover?.caption ?? frontmatter.cover?.alt}
        </em>
      )}
    </CenterLayout>
  )}

  <div class="program-update__content">
    <slot />
  </div>

  {(displayDate || (frontmatter?.tags?.length ?? 0) > 0) && (
    <footer class="program-update__footer">
      <div class="program-update__footer-left">
        {frontmatter?.tags?.length && (
          <ul class="program-update__tags">
            {frontmatter.tags.map((tag) => <li>{tag}</li>)}
          </ul>
        )}
      </div>

      <div class="program-update__footer-right">
        {displayDate && (
          <time datetime={isoDate} class="program-update__date">
            <span class="program-update__date-label">Published:</span> {displayDate}
          </time>
        )}
      </div>
    </footer>
  )}
</article>

<style is:global>
.program-update {
  display: grid;
  gap: 2.5rem;
}

.program-update__cover-image {
  width: 100%;
  height: auto;
  border-radius: var(--radius-md);
  box-shadow: var(--shadow-lg);
  margin-top: 0.5rem;
}

.program-update__cover-caption {
  display: block;
  margin-top: 0.75rem;
  font-size: 0.85rem;
  color: var(--sl-color-text-secondary);
}

.program-update__footer {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-between;
  align-items: center;
  gap: 0.75rem 1rem;
  border-top: 1px solid var(--sl-color-hairline);
  padding-top: 1.25rem;
  font-size: 0.95rem;
  color: var(--sl-color-text-secondary);
}

.program-update__footer-right {
  margin-left: auto;
}

.program-update__content {
  display: grid;
  gap: 1.75rem;
}

.program-update__content :where(h2) {
  margin: 1.75rem 0 0.75rem;
}

.program-update__content :where(h2)::before {
  content: '◆';
  margin-right: 0.5rem;
  color: color-mix(in srgb, var(--sl-color-accent) 75%, white 25%);
  font-size: 0.85em;
}

.monthly-highlight {
  position: relative;
  padding: 1.75rem 2rem;
  border-radius: var(--radius-lg);
  background: color-mix(in srgb, var(--sl-color-accent-high) 12%, transparent);
  border: 1px solid color-mix(in srgb, var(--sl-color-accent) 30%, transparent);
  box-shadow: 0 12px 32px -18px rgba(0, 0, 0, 0.15);
  display: grid;
  gap: 1rem;
}

.monthly-highlight::before {
  content: '★ Monthly Highlight';
  font-size: 1rem;
  font-weight: 600;
  letter-spacing: 0.08em;
  text-transform: uppercase;
  color: color-mix(in srgb, var(--sl-color-accent) 80%, white 20%);
  display: inline-flex;
  align-items: center;
  gap: 0.4rem;
}

.monthly-highlight :where(p, ul, ol) {
  margin: 0;
}

.monthly-highlight :where(ul, ol) {
  padding-left: 1.2rem;
}

.monthly-highlight :where(h2)::before {
  content: '';
  margin-right: 0rem;
  color: color-mix(in srgb, var(--sl-color-accent) 85%, white 15%);
}

.records-total {
  display: inline-flex;
  justify-content: center;
  align-items: center;
  gap: 0.6rem;
  padding: 0.7rem 1.4rem;
  border-radius: 999px;
  font-weight: 650;
  background: color-mix(in srgb, var(--sl-color-accent-high) 22%, transparent);
  border: 1px solid color-mix(in srgb, var(--sl-color-accent) 40%, transparent);
  color: color-mix(in srgb, var(--sl-color-accent) 88%, var(--sl-color-text) 12%);
  text-align: center;
  font-size: 1.08rem;
}

.records-total::before {
  content: '◎';
  font-size: 1.1rem;
}

.records-total strong {
  font-size: 1.12em;
}

.program-update__footer {
  display: flex;
  flex-wrap: wrap;
  align-items: center;
  gap: 0.75rem 1rem;
  border-top: 1px solid var(--sl-color-hairline);
  padding-top: 1.25rem;
  font-size: 0.95rem;
  color: var(--sl-color-text-secondary);
}

.program-update__tags {
  display: inline-flex;
  gap: 0.5rem;
  list-style: none;
  margin: 0;
  padding: 0;
}

.program-update__tags > li {
  background: var(--sl-color-hairline);
  border-radius: 999px;
  padding: 0.25rem 0.9rem;
}

.program-update__date {
  font-weight: 500;
  letter-spacing: 0.01em;
}

.program-update__date-label {
  font-weight: 600;
  text-transform: uppercase;
  letter-spacing: 0.08em;
  margin-right: 0.35rem;
}

@media (max-width: 48rem) {
  .program-update {
    gap: 2rem;
  }

  .program-update__footer {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.5rem;
  }

  .program-update__footer-right {
    margin-left: 0;
  }
}
</style>
